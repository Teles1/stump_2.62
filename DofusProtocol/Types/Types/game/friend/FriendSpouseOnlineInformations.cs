// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'FriendSpouseOnlineInformations.xml' the '04/04/2012 14:27:38'
using System;
using Stump.Core.IO;

namespace Stump.DofusProtocol.Types
{
	public class FriendSpouseOnlineInformations : FriendSpouseInformations
	{
		public const uint Id = 93;
		public override short TypeId
		{
			get
			{
				return 93;
			}
		}
		
		public bool inFight;
		public bool followSpouse;
		public bool pvpEnabled;
		public int mapId;
		public short subAreaId;
		
		public FriendSpouseOnlineInformations()
		{
		}
		
		public FriendSpouseOnlineInformations(int spouseAccountId, int spouseId, string spouseName, byte spouseLevel, sbyte breed, sbyte sex, Types.EntityLook spouseEntityLook, Types.BasicGuildInformations guildInfo, sbyte alignmentSide, bool inFight, bool followSpouse, bool pvpEnabled, int mapId, short subAreaId)
			 : base(spouseAccountId, spouseId, spouseName, spouseLevel, breed, sex, spouseEntityLook, guildInfo, alignmentSide)
		{
			this.inFight = inFight;
			this.followSpouse = followSpouse;
			this.pvpEnabled = pvpEnabled;
			this.mapId = mapId;
			this.subAreaId = subAreaId;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			base.Serialize(writer);
			byte flag1 = 0;
			flag1 = BooleanByteWrapper.SetFlag(flag1, 0, inFight);
			flag1 = BooleanByteWrapper.SetFlag(flag1, 1, followSpouse);
			flag1 = BooleanByteWrapper.SetFlag(flag1, 2, pvpEnabled);
			writer.WriteByte(flag1);
			writer.WriteInt(mapId);
			writer.WriteShort(subAreaId);
		}
		
		public override void Deserialize(IDataReader reader)
		{
			base.Deserialize(reader);
			byte flag1 = reader.ReadByte();
			inFight = BooleanByteWrapper.GetFlag(flag1, 0);
			followSpouse = BooleanByteWrapper.GetFlag(flag1, 1);
			pvpEnabled = BooleanByteWrapper.GetFlag(flag1, 2);
			mapId = reader.ReadInt();
			if ( mapId < 0 )
			{
				throw new Exception("Forbidden value on mapId = " + mapId + ", it doesn't respect the following condition : mapId < 0");
			}
			subAreaId = reader.ReadShort();
			if ( subAreaId < 0 )
			{
				throw new Exception("Forbidden value on subAreaId = " + subAreaId + ", it doesn't respect the following condition : subAreaId < 0");
			}
		}
	}
}
