// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'Preset.xml' the '04/04/2012 14:27:39'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Types
{
	public class Preset
	{
		public const uint Id = 355;
		public virtual short TypeId
		{
			get
			{
				return 355;
			}
		}
		
		public sbyte presetId;
		public sbyte symbolId;
		public bool mount;
		public IEnumerable<Types.PresetItem> objects;
		
		public Preset()
		{
		}
		
		public Preset(sbyte presetId, sbyte symbolId, bool mount, IEnumerable<Types.PresetItem> objects)
		{
			this.presetId = presetId;
			this.symbolId = symbolId;
			this.mount = mount;
			this.objects = objects;
		}
		
		public virtual void Serialize(IDataWriter writer)
		{
			writer.WriteSByte(presetId);
			writer.WriteSByte(symbolId);
			writer.WriteBoolean(mount);
			writer.WriteUShort((ushort)objects.Count());
			foreach (var entry in objects)
			{
				entry.Serialize(writer);
			}
		}
		
		public virtual void Deserialize(IDataReader reader)
		{
			presetId = reader.ReadSByte();
			if ( presetId < 0 )
			{
				throw new Exception("Forbidden value on presetId = " + presetId + ", it doesn't respect the following condition : presetId < 0");
			}
			symbolId = reader.ReadSByte();
			if ( symbolId < 0 )
			{
				throw new Exception("Forbidden value on symbolId = " + symbolId + ", it doesn't respect the following condition : symbolId < 0");
			}
			mount = reader.ReadBoolean();
			int limit = reader.ReadUShort();
			objects = new Types.PresetItem[limit];
			for (int i = 0; i < limit; i++)
			{
				(objects as PresetItem[])[i] = new Types.PresetItem();
				(objects as Types.PresetItem[])[i].Deserialize(reader);
			}
		}
	}
}
