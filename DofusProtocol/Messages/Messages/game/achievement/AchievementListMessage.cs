// File generated by 'DofusProtocolBuilder.exe v1.0.0.0'
// From 'AchievementListMessage.xml' the '04/04/2012 14:27:19'
using System;
using Stump.Core.IO;
using System.Collections.Generic;
using System.Linq;

namespace Stump.DofusProtocol.Messages
{
	public class AchievementListMessage : Message
	{
		public const uint Id = 6205;
		public override uint MessageId
		{
			get
			{
				return 6205;
			}
		}
		
		public IEnumerable<Types.Achievement> startedAchievements;
		public IEnumerable<short> finishedAchievementsIds;
		
		public AchievementListMessage()
		{
		}
		
		public AchievementListMessage(IEnumerable<Types.Achievement> startedAchievements, IEnumerable<short> finishedAchievementsIds)
		{
			this.startedAchievements = startedAchievements;
			this.finishedAchievementsIds = finishedAchievementsIds;
		}
		
		public override void Serialize(IDataWriter writer)
		{
			writer.WriteUShort((ushort)startedAchievements.Count());
			foreach (var entry in startedAchievements)
			{
				writer.WriteShort(entry.TypeId);
				entry.Serialize(writer);
			}
			writer.WriteUShort((ushort)finishedAchievementsIds.Count());
			foreach (var entry in finishedAchievementsIds)
			{
				writer.WriteShort(entry);
			}
		}
		
		public override void Deserialize(IDataReader reader)
		{
			int limit = reader.ReadUShort();
			startedAchievements = new Types.Achievement[limit];
			for (int i = 0; i < limit; i++)
			{
				(startedAchievements as Types.Achievement[])[i] = Types.ProtocolTypeManager.GetInstance<Types.Achievement>(reader.ReadShort());
				(startedAchievements as Types.Achievement[])[i].Deserialize(reader);
			}
			limit = reader.ReadUShort();
			finishedAchievementsIds = new short[limit];
			for (int i = 0; i < limit; i++)
			{
				(finishedAchievementsIds as short[])[i] = reader.ReadShort();
			}
		}
	}
}
