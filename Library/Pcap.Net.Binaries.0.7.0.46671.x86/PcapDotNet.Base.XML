<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PcapDotNet.Base</name>
    </assembly>
    <members>
        <member name="T:PcapDotNet.Base.UInt24">
            <summary>
            A 24 bit unsigned integer.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt24.SizeOf">
            <summary>
            The number of bytes this type will take.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt24.MaxValue">
            <summary>
            The maximum value of this type.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.op_Explicit(System.Int32)~PcapDotNet.Base.UInt24">
            <summary>
            Converts a 32 bit signed integer to a 24 bit unsigned integer by taking the 24 least significant bits.
            </summary>
            <param name="value">The 32 bit value to convert.</param>
            <returns>The 24 bit value created by taking the 24 least significant bits of the 32 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.op_Implicit(PcapDotNet.Base.UInt24)~System.Int32">
            <summary>
            Converts the 24 bits unsigned integer to a 32 bits signed integer.
            </summary>
            <param name="value">The 24 bit value to convert.</param>
            <returns>The 32 bit value converted from the 24 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.Equals(PcapDotNet.Base.UInt24)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.op_Equality(PcapDotNet.Base.UInt24,PcapDotNet.Base.UInt24)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.op_Inequality(PcapDotNet.Base.UInt24,PcapDotNet.Base.UInt24)">
            <summary>
            Returns true iff the two values represent different values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent different values.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt24.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:PcapDotNet.Base.IEnumerableExtensions">
            <summary>
            Extension methods for IEnumerable of type T.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            True iff the sequence has no elements.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Concatenates a sequence with more values.
            </summary>
            <typeparam name="T">The type of an element in the sequence.</typeparam>
            <param name="sequence">The sequence to concatenate.</param>
            <param name="values">The values that will be concatenated with the sequence.</param>
            <returns>A sequence containing all the original sequence elements cocatenated with values elements.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.SequenceToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
            Converts a sequence to a string by converting each element to a string.
            </summary>
            <typeparam name="T">The type of an element in the sequence.</typeparam>
            <param name="sequence">The sequence with the elements to translate to string.</param>
            <param name="separator">A separator between the elements.</param>
            <param name="prefix">Prefix to the entire string.</param>
            <param name="suffix">Suffix to the entire string.</param>
            <returns>A string of all the elements.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.SequenceToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Converts a sequence to a string by converting each element to a string.
            </summary>
            <typeparam name="T">The type of an element in the sequence.</typeparam>
            <param name="sequence">The sequence with the elements to translate to string.</param>
            <param name="separator">A separator between the elements.</param>
            <param name="prefix">Prefix to the entire string.</param>
            <returns>A string of all the elements.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.SequenceToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts a sequence to a string by converting each element to a string.
            </summary>
            <typeparam name="T">The type of an element in the sequence.</typeparam>
            <param name="sequence">The sequence with the elements to translate to string.</param>
            <param name="separator">A separator between the elements.</param>
            <returns>A string of all the elements.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.SequenceToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to a string by converting each element to a string.
            </summary>
            <typeparam name="T">The type of an element in the sequence.</typeparam>
            <param name="sequence">The sequence with the elements to translate to string.</param>
            <returns>A string of all the elements.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.BytesSequenceToHexadecimalString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Returns a string by converting all the bytes to a hexadecimal string.
            </summary>
            <param name="sequence">The bytes to convert to a string.</param>
            <param name="separator">The string to put between every two bytes.</param>
            <returns>The string resulted by converting all the bytes to hexadecimal strings and putting the separator between them.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.BytesSequenceToHexadecimalString(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Returns a string by converting all the bytes to a hexadecimal string.
            </summary>
            <param name="sequence">The bytes to convert to a string.</param>
            <returns>The string resulted by converting all the bytes to hexadecimal strings.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.SequenceGetHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a hash code by xoring the hash codes of the elements in the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="sequence">The sequence with the elements to create the hash code for.</param>
            <returns>The hash code created by xoring all the hash codes of the elements in the sequence.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.BytesSequenceGetHashCode(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Returns a hash code by xoring all the bytes.
            Each byte is xored with the next 8 bits of the integer.
            </summary>
            <param name="sequence">The bytes to xor.</param>
            <returns>The hash code resulted by xoring all the bytes.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.UShortsSequenceGetHashCode(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Returns a hash code by xoring all the ushorts.
            Each ushort is xored with the next 16 bits of the integer.
            </summary>
            <param name="sequence">The ushorts to xor.</param>
            <returns>The hash code resulted by xoring all the ushorts.</returns>
        </member>
        <member name="M:PcapDotNet.Base.IEnumerableExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Counts the number of types the given value is contained in the given sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="sequence">The sequence to look for the value in.</param>
            <param name="value">The value to look for in the sequence.</param>
            <returns>The number of types the given value is contained in the given sequence.</returns>
        </member>
        <member name="T:PcapDotNet.Base.TypeExtensions">
            <summary>
            Extension methods for Type.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.TypeExtensions.GetEnumValues``1(System.Type)">
            <summary>
            Returns all the possible values for the given enum type.
            </summary>
        </member>
        <member name="T:PcapDotNet.Base.MemberInfoExtensions">
            <summary>
            Extension methods for MemberInfo.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.MemberInfoExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            When overridden in a derived class, returns a sequence of custom attributes identified by System.Type.
            </summary>
            <typeparam name="T">TThe type of attribute to search for. Only attributes that are assignable to this type are returned.</typeparam>
            <param name="memberInfo">The memberInfo to look the attributes on.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>A sequence of custom attributes applied to this member, or a sequence with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="T:PcapDotNet.Base.IListExtensions">
            <summary>
            Extension methods for IList of type T.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.IListExtensions.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Wraps a list with a ReadOnlyCollection.
            </summary>
            <typeparam name="T">The type of an element in the collection.</typeparam>
            <param name="list">The list to wrap in a ReadOnlyCollection.</param>
            <returns></returns>
        </member>
        <member name="T:PcapDotNet.Base.PropertyInfoExtensions">
            <summary>
            Extension methods for PropertyInfo.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.PropertyInfoExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Returns the value of the given instance's non-indexed property.
            </summary>
        </member>
        <member name="T:PcapDotNet.Base.UInt128">
            <summary>
            A 128 bit unsigned integer.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt128.SizeOf">
            <summary>
            The number of bytes this type will take.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt128.MaxValue">
            <summary>
            The maximum value of this type.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt128.Zero">
            <summary>
            A Zero UInt128 value.
            The minimum UInt128 value.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Creates a value using two 64 bit values.
            </summary>
            <param name="mostSignificant">The most significant 64 bits of the value.</param>
            <param name="leastSignificant">The least significant 64 bits of the value.</param>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style to its 128-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string representing the number to convert.</param>
            <param name="style">
            A bitwise combination of NumberStyles values that indicates the permitted format of value.
            A typical value to specify is NumberStyles.Integer.
            </param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information about value.</param>
            <returns>A 128-bit unsigned integer equivalent to the number specified in s.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_Implicit(System.UInt64)~PcapDotNet.Base.UInt128">
            <summary>
            Converts a 64 bit unsigned integer to a 128 bit unsigned integer by taking all the 64 bits.
            </summary>
            <param name="value">The 64 bit value to convert.</param>
            <returns>The 128 bit value created by taking all the 64 bits of the 64 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_Explicit(PcapDotNet.Base.UInt128)~System.UInt64">
            <summary>
            Converts the 128 bits unsigned integer to a 64 bits unsigned integer.
            </summary>
            <param name="value">The 128 bit value to convert.</param>
            <returns>The 64 bit value converted from the 128 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.Equals(PcapDotNet.Base.UInt128)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_Equality(PcapDotNet.Base.UInt128,PcapDotNet.Base.UInt128)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_Inequality(PcapDotNet.Base.UInt128,PcapDotNet.Base.UInt128)">
            <summary>
            Returns true iff the two values represent different values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent different values.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_RightShift(PcapDotNet.Base.UInt128,System.Int32)">
            <summary>
            Shifts its first operand right by the number of bits specified by its second operand.
            </summary>
            <param name="value">The value to shift.</param>
            <param name="numberOfBits">The number of bits to shift.</param>
            <returns>The value after it was shifted by the given number of bits.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.RightShift(PcapDotNet.Base.UInt128,System.Int32)">
            <summary>
            Shifts its first operand right by the number of bits specified by its second operand.
            </summary>
            <param name="value">The value to shift.</param>
            <param name="numberOfBits">The number of bits to shift.</param>
            <returns>The value after it was shifted by the given number of bits.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.op_BitwiseAnd(PcapDotNet.Base.UInt128,PcapDotNet.Base.UInt128)">
            <summary>
            Bitwise ands between two values.
            </summary>
            <param name="value1">The first value to do bitwise and.</param>
            <param name="value2">The second value to do bitwise and.</param>
            <returns>The two values after they were bitwise anded.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.BitwiseAnd(PcapDotNet.Base.UInt128,PcapDotNet.Base.UInt128)">
            <summary>
            Bitwise ands between two values.
            </summary>
            <param name="value1">The first value to do bitwise and.</param>
            <param name="value2">The second value to do bitwise and.</param>
            <returns>The two values after they were bitwise anded.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.ToString(System.String)">
            <summary>
            Returns the hexadecimal string representation of the 128 bits unsigned integer.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.UInt128.ToString">
            <summary>
            Currently not supported since only X32 string format is supported (and not decimal).
            </summary>
            <returns></returns>
        </member>
        <member name="T:PcapDotNet.Base.TimeSpanExtensions">
            <summary>
            Extension methods for TimeSpan.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.TimeSpanExtensions.Divide(System.TimeSpan,System.Double)">
            <summary>
            Divides the TimeSpan by a given value.
            </summary>
            <param name="timeSpan">The TimeSpan to divide.</param>
            <param name="value">The value to divide the TimeSpan by.</param>
            <returns>A TimeSpan value equals to the given TimeSpan divided by the given value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.TimeSpanExtensions.Multiply(System.TimeSpan,System.Double)">
            <summary>
            Multiplies the TimeSpan by a given value.
            </summary>
            <param name="timeSpan">The TimeSpan to multiply.</param>
            <param name="value">The value to multiply the TimeSpan by.</param>
            <returns>A TimeSpan value equals to the given TimeSpan multiplied by the given value.</returns>
        </member>
        <member name="T:PcapDotNet.Base.UInt48">
            <summary>
            A 48 bit unsigned integer.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt48.SizeOf">
            <summary>
            The number of bytes this type will take.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt48.MinValue">
            <summary>
            The minimum value of this type.
            </summary>
        </member>
        <member name="F:PcapDotNet.Base.UInt48.MaxValue">
            <summary>
            The maximum value of this type.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its 48-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string that represents the number to convert.</param>
            <returns>A 48-bit unsigned integer equivalent to the number contained in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">The <paramref name="value"/> parameter is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">The <paramref name="value"/> parameter represents a number less than <see cref="F:PcapDotNet.Base.UInt48.MinValue"/> or greater than <see cref="F:PcapDotNet.Base.UInt48.MaxValue"/>.</exception>
            <remarks>
            The <paramref name="value"/> parameter should be the string representation of a number in the following form.
            <para>[ws][sign]digits[ws]</para>
            <para> Elements in square brackets ([ and ]) are optional. The following table describes each element.</para>
              <list type="table">
                <listheader>
                  <term>Element</term>
                  <description>Description</description>
                </listheader>
                <item><term>ws</term><description>Optional white space.</description></item>
                <item>
                  <term>sign</term>
                  <description>
                  An optional sign. 
                  Valid sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/> and <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/> properties of the current culture. 
                  However, the negative sign symbol can be used only with zero; otherwise, the method throws an <see cref="T:System.OverflowException"/>.
                  </description>
                </item>
                <item><term>digits</term><description>A sequence of digits from 0 through 9. Any leading zeros are ignored.</description></item>
              </list>
              <note>
              The <paramref name="value"/> parameter is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer"/> style. 
              It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.
              </note>
              The <paramref name="value"/> parameter is parsed by using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo"/> object that is initialized for the current system culture. 
              For more information, see <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/>. 
              To parse a string by using the formatting information of a specific culture, use the <see cref="M:PcapDotNet.Base.UInt48.Parse(System.String,System.IFormatProvider)"/> method.
            </remarks>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified culture-specific format to its 48-bit unsigned integer equivalent.
            </summary>
            <param name="value">A string that represents the number to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>A 48-bit unsigned integer equivalent to the number specified in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">The <paramref name="value"/> parameter is not in the correct style.</exception>
            <exception cref="T:System.OverflowException">
              The <paramref name="value"/> parameter represents a number less than <see cref="F:PcapDotNet.Base.UInt48.MinValue"/> or greater than <see cref="F:PcapDotNet.Base.UInt48.MaxValue"/>. 
            </exception>
            <remarks>
            This overload of the Parse(String, IFormatProvider) method is typically used to convert text that can be formatted in a variety of ways to a <see cref="T:PcapDotNet.Base.UInt48"/> value. 
            For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.
            <para>The <paramref name="value"/> parameter contains a number of the form:</para>
            <para>[ws][sign]digits[ws]</para>
            <para>
              Elements in square brackets ([ and ]) are optional. 
              The following table describes each element:        
            </para>
              <list type="table">
                <listheader>
                  <term>Element</term>
                  <description>Description</description>
                </listheader>
                <item><term>ws</term><description>Optional white space.</description></item>
                <item>
                  <term>sign</term>
                  <description>An optional positive sign, or a negative sign if <paramref name="value"/> represents the value zero.</description>
                </item>
                <item><term>digits</term><description>A sequence of digits from 0 through 9.</description></item>
              </list>
              The <paramref name="value"/> parameter is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer"/> style. 
              In addition to the unsigned integer value's decimal digits, only leading and trailing spaces along with a leading sign is allowed. 
              (If the negative sign is present, <paramref name="value"/> must represent a value of zero, or the method throws an <see cref="T:System.OverflowException"/>.) 
              To explicitly define the style elements together with the culture-specific formatting information that can be present in <paramref name="value"/>, use the <see cref="M:PcapDotNet.Base.UInt48.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/> method.
              <para>
              The <paramref name="provider"/> parameter is an <see cref="T:System.IFormatProvider"/> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> method returns a <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides culture-specific information about the format of <paramref name="value"/>. 
              There are three ways to use the <paramref name="provider"/> parameter to supply custom formatting information to the parse operation:
              </para>
              <list type="bullet">
                <item>You can pass the actual <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides formatting information. (Its implementation of <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> simply returns itself.)</item>
                <item>You can pass a <see cref="T:System.Globalization.CultureInfo"/> object that specifies the culture whose formatting is to be used. Its <see cref="P:System.Globalization.CultureInfo.NumberFormat"/> property provides formatting information.</item>
                <item>You can pass a custom <see cref="T:System.IFormatProvider"/> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> method must instantiate and return the <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides formatting information.</item>
              </list>
              If provider is <see langword="null"/>, the <see cref="T:System.Globalization.NumberFormatInfo"/> object for the current culture is used.
            </remarks>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its 48-bit unsigned integer equivalent.
            </summary>
            <param name="value">
            A string that represents the number to convert. 
            The string is interpreted by using the style specified by the <paramref name="style"/> parameter.
            </param>
            <param name="style">
            A bitwise combination of the enumeration values that specifies the permitted format of <paramref name="value"/>. 
            A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <returns>A 48-bit unsigned integer equivalent to the number specified in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
              <para>-or-</para>
              <para><paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</para>
            </exception>
            <exception cref="T:System.FormatException">The <paramref name="value"/> parameter is not in a format compliant with <paramref name="style"/>.</exception>
            <exception cref="T:System.OverflowException">
              The <paramref name="value"/> parameter represents a number less than <see cref="F:PcapDotNet.Base.UInt48.MinValue"/> or greater than <see cref="F:PcapDotNet.Base.UInt48.MaxValue"/>. 
              <para>-or-</para>
              <para><paramref name="value"/> includes non-zero, fractional digits.</para>
            </exception>
            <remarks>
            The <paramref name="style"/> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the s parameter for the parse operation to succeed. 
            It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles"/> enumeration.
            <para>Depending on the value of style, the <paramref name="value"/> parameter may include the following elements:</para>
            <para>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws]</para>
            <para>
              Elements in square brackets ([ and ]) are optional. 
              If <paramref name="style"/> includes <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/>, the <paramref name="value"/> parameter may contain the following elements:
            </para>
            <para>[ws]hexdigits[ws]</para>
            <para>The following table describes each element.</para>
              <list type="table">
                <listheader>
                  <term>Element</term>
                  <description>Description</description>
                </listheader>
                <item>
                  <term>ws</term>
                  <description>
                  Optional white space. 
                  White space can appear at the start of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/> flag, 
                  and it can appear at the end of <paramref name="style"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/> flag.
                  </description>
                </item>
                <item>
                  <term>$</term>
                  <description>
                  A culture-specific currency symbol. 
                  Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/> properties of the current culture. 
                  The current culture's currency symbol can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/> flag.
                  </description>
                </item>
                <item>
                  <term>sign</term>
                  <description>
                  An optional sign. 
                  The sign can appear at the start of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/> flag, and it can appear at the end of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign"/> flag. 
                  Parentheses can be used in <paramref name="value"/> to indicate a negative value if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses"/> flag. 
                  However, the negative sign symbol can be used only with zero; otherwise, the method throws an <see cref="T:System.OverflowException"/>.
                  </description>
                </item>
                <item>
                  <term>digits</term>
                  <description>A sequence of digits from 0 through 9.</description>
                </item>
                <item>
                  <term>.</term>
                  <description>
                  A culture-specific decimal point symbol. 
                  The current culture's decimal point symbol can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> flag.
                  </description>
                </item>
                <item>
                  <term>,</term>
                  <description>
                  A culture-specific group separator symbol. 
                  The current culture's group separator can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> flag.</description>
                </item>
                <item>
                  <term>fractional_digits</term>
                  <description>
                  One or more occurrences of the digit 0-9 if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag, 
                  or one or more occurrences of the digit 0 if it does not. 
                  Fractional digits can appear in <paramref name="value"/> only if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> flag.
                  </description>
                </item>
                <item>
                  <term>E</term>
                  <description>
                  The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. 
                  The <paramref name="value"/> parameter can represent a number in exponential notation if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag.
                  </description>
                </item>
                <item>
                  <term>exponential_digits</term>
                  <description>
                  A sequence of digits from 0 through 9. 
                  The <paramref name="value"/> parameter can represent a number in exponential notation if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag.
                  </description>
                </item>
                <item><term>hexdigits</term><description>A sequence of hexadecimal digits from 0 through f, or 0 through F.</description></item>
              </list>
              A string with decimal digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None"/> style) always parses successfully. 
              Most of the remaining <see cref="T:System.Globalization.NumberStyles"/> members control elements that may be present, but are not required to be present, in this input string. 
              The following table indicates how individual <see cref="T:System.Globalization.NumberStyles"/> members affect the elements that may be present in <paramref name="value"/>.
              <list type="table">
                <listheader>
                    <term><see cref="T:System.Globalization.NumberStyles"/> value</term>
                    <description>Elements permitted in <paramref name="value"/> in addition to digits</description>
                </listheader>
                <item><term><see cref="F:System.Globalization.NumberStyles.None"/></term><description>The digits element only.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/></term><description>The decimal point (.) and fractional_digits elements. However, if <paramref name="style"/> does not include the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag, fractional_digits must consist of only one or more 0 digits; otherwise, an <see cref="T:System.OverflowException"/> is thrown.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowExponent"/></term><description>The "e" or "E" character, which indicates exponential notation, along with exponential_digits.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/></term><description>The ws element at the start of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/></term><description>The ws element at the end of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/></term><description>The sign element at the start of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowTrailingSign"/></term><description>The sign element at the end of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowParentheses"/></term><description>The sign element in the form of parentheses enclosing the numeric value.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowThousands"/></term><description>The group separator (,) element. </description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/></term><description>The currency ($) element.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Currency"/></term><description>All elements. However, <paramref name="value"/> cannot represent a hexadecimal number or a number in exponential notation.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Float"/></term><description>The ws element at the start or end of <paramref name="value"/>, sign at the start of <paramref name="value"/>, and the decimal point (.) symbol. The <paramref name="value"/> parameter can also use exponential notation.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Number"/></term><description>The ws, sign, group separator (,), and decimal point (.) elements.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Any"/></term><description>All elements. However, <paramref name="value"/> cannot represent a hexadecimal number.</description></item>
              </list>
              Unlike the other <see cref="T:System.Globalization.NumberStyles"/> values, which allow for, but do not require, the presence of particular style elements in <paramref name="value"/>, the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> style value means that the individual numeric characters in <paramref name="value"/> are always interpreted as hexadecimal characters. 
              Valid hexadecimal characters are 0-9, A-F, and a-f. 
              The only other flags that can be combined with the <paramref name="style"/> parameter are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/>. 
              (The <see cref="T:System.Globalization.NumberStyles"/> enumeration includes a composite number style, <see cref="F:System.Globalization.NumberStyles.HexNumber"/>, that includes both white-space flags.)
              <note>
              If <paramref name="value"/> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as 0x or &amp;h) that differentiates it as a hexadecimal number. 
              This causes the conversion to fail.
              </note>
              The <paramref name="value"/> parameter is parsed by using the formatting information in a <see cref="T:System.Globalization.NumberFormatInfo"/> object that is initialized for the current system culture. 
              To specify the culture whose formatting information is used for the parse operation, call the <see cref="M:PcapDotNet.Base.UInt48.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)"/> overload.
            </remarks>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 48-bit unsigned integer equivalent.
            </summary>
            <param name="value">
            A string that represents the number to convert. 
            The string is interpreted by using the style specified by the <paramref name="style"/> parameter.
            </param>
            <param name="style">
            A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. 
            A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value"/>.</param>
            <returns>A 48-bit unsigned integer equivalent to the number specified in <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value.
              <para>-or-</para>
              <para><paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</para>
            </exception>
            <exception cref="T:System.FormatException">The <paramref name="value"/> parameter is not in a format compliant with <paramref name="style"/>.</exception>
            <exception cref="T:System.OverflowException">
              The <paramref name="value"/> parameter represents a number less than <see cref="F:PcapDotNet.Base.UInt48.MinValue"/> or greater than <see cref="F:PcapDotNet.Base.UInt48.MaxValue"/>. 
              <para>-or-</para>
              <para><paramref name="value"/> includes non-zero, fractional digits.</para>
            </exception>
            <remarks>
            The <paramref name="style"/> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the s parameter for the parse operation to succeed. 
            It must be a combination of bit flags from the <see cref="T:System.Globalization.NumberStyles"/> enumeration.
            <para>Depending on the value of style, the <paramref name="value"/> parameter may include the following elements:</para>
            <para>[ws][$][sign][digits,]digits[.fractional_digits][E[sign]exponential_digits][ws]</para>
            <para>
              Elements in square brackets ([ and ]) are optional. 
              If <paramref name="style"/> includes <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/>, the <paramref name="value"/> parameter may contain the following elements:
            </para>
            <para>[ws]hexdigits[ws]</para>
            <para>The following table describes each element.</para>
              <list type="table">
                <listheader>
                  <term>Element</term>
                  <description>Description</description>
                </listheader>
                <item>
                  <term>ws</term>
                  <description>
                  Optional white space. 
                  White space can appear at the start of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/> flag, 
                  and it can appear at the end of <paramref name="style"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/> flag.
                  </description>
                </item>
                <item>
                  <term>$</term>
                  <description>
                  A culture-specific currency symbol. 
                  Its position in the string is defined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern"/> and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern"/> properties of the <see cref="T:System.Globalization.NumberFormatInfo"/> object that is returned by the <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> method of the provider parameter. 
                  The currency symbol can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/> flag.
                  </description>
                </item>
                <item>
                  <term>sign</term>
                  <description>
                  An optional sign. 
                  The sign can appear at the start of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/> flag, and it can appear at the end of <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowTrailingSign"/> flag. 
                  Parentheses can be used in <paramref name="value"/> to indicate a negative value if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowParentheses"/> flag.
                  However, the negative sign symbol can be used only with zero; otherwise, the method throws an <see cref="T:System.OverflowException"/>.
                  </description>
                </item>
                <item><term>digits</term><description>A sequence of digits from 0 through 9.</description></item>
                <item>
                  <term>.</term>
                  <description>
                  A culture-specific decimal point symbol. 
                  The current culture's decimal point symbol can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> flag.
                  </description>
                </item>
                <item>
                  <term>,</term>
                  <description>
                  A culture-specific group separator symbol. 
                  The current culture's group separator can appear in <paramref name="value"/> if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowThousands"/> flag.</description>
                </item>
                <item>
                  <term>fractional_digits</term>
                  <description>
                  One or more occurrences of the digit 0-9 if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag, 
                  or one or more occurrences of the digit 0 if it does not. 
                  Fractional digits can appear in <paramref name="value"/> only if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/> flag.
                  </description>
                </item>
                <item>
                  <term>E</term>
                  <description>
                  The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation. 
                  The <paramref name="value"/> parameter can represent a number in exponential notation if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag.
                  </description>
                </item>
                <item>
                  <term>exponential_digits</term>
                  <description>
                  A sequence of digits from 0 through 9. 
                  The <paramref name="value"/> parameter can represent a number in exponential notation if <paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag.
                  </description>
                </item>
                <item><term>hexdigits</term><description>A sequence of hexadecimal digits from 0 through f, or 0 through F.</description></item>
              </list>
              A string with decimal digits only (which corresponds to the <see cref="F:System.Globalization.NumberStyles.None"/> style) always parses successfully. 
              Most of the remaining <see cref="T:System.Globalization.NumberStyles"/> members control elements that may be present, but are not required to be present, in this input string. 
              The following table indicates how individual <see cref="T:System.Globalization.NumberStyles"/> members affect the elements that may be present in <paramref name="value"/>.
              <list type="table">
                <listheader>
                    <term><see cref="T:System.Globalization.NumberStyles"/> value</term>
                    <description>Elements permitted in <paramref name="value"/> in addition to digits</description>
                </listheader>
                <item><term><see cref="F:System.Globalization.NumberStyles.None"/></term><description>The digits element only.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint"/></term><description>The decimal point (.) and fractional_digits elements. However, if <paramref name="style"/> does not include the <see cref="F:System.Globalization.NumberStyles.AllowExponent"/> flag, fractional_digits must consist of only one or more 0 digits; otherwise, an <see cref="T:System.OverflowException"/> is thrown.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowExponent"/></term><description>The "e" or "E" character, which indicates exponential notation, along with exponential_digits.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/></term><description>The ws element at the start of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/></term><description>The ws element at the end of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowLeadingSign"/></term><description>The sign element at the start of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowTrailingSign"/></term><description>The sign element at the end of <paramref name="value"/>.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowParentheses"/></term><description>The sign element in the form of parentheses enclosing the numeric value.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowThousands"/></term><description>The group separator (,) element. </description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol"/></term><description>The currency ($) element.</description></item>
              <item><term><see cref="F:System.Globalization.NumberStyles.Currency"/></term><description>All elements. However, <paramref name="value"/> cannot represent a hexadecimal number or a number in exponential notation.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Float"/></term><description>The ws element at the start or end of <paramref name="value"/>, sign at the start of <paramref name="value"/>, and the decimal point (.) symbol. The <paramref name="value"/> parameter can also use exponential notation.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Number"/></term><description>The ws, sign, group separator (,), and decimal point (.) elements.</description></item>
                <item><term><see cref="F:System.Globalization.NumberStyles.Any"/></term><description>All elements. However, <paramref name="value"/> cannot represent a hexadecimal number.</description></item>
              </list>
              Unlike the other <see cref="T:System.Globalization.NumberStyles"/> values, which allow for, but do not require, the presence of particular style elements in <paramref name="value"/>, the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> style value means that the individual numeric characters in <paramref name="value"/> are always interpreted as hexadecimal characters. 
              Valid hexadecimal characters are 0-9, A-F, and a-f. 
              The only other flags that can be combined with the <paramref name="style"/> parameter are <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite"/> and <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite"/>. 
              (The <see cref="T:System.Globalization.NumberStyles"/> enumeration includes a composite number style, <see cref="F:System.Globalization.NumberStyles.HexNumber"/>, that includes both white-space flags.) 
              <note>
              If <paramref name="value"/> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as 0x or &amp;h) that differentiates it as a hexadecimal number. 
              This causes the conversion to fail.
              </note>
              The <paramref name="provider"/> parameter is an <see cref="T:System.IFormatProvider"/> implementation whose <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> method returns a <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides culture-specific information about the format of <paramref name="value"/>. 
              There are three ways to use the <paramref name="provider"/> parameter to supply custom formatting information to the parse operation:
              <list type="bullet">
                <item>You can pass the actual <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides formatting information. (Its implementation of <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> simply returns itself.)</item>
                <item>You can pass a <see cref="T:System.Globalization.CultureInfo"/> object that specifies the culture whose formatting is to be used. Its <see cref="P:System.Globalization.CultureInfo.NumberFormat"/> property provides formatting information.</item>
                <item>You can pass a custom <see cref="T:System.IFormatProvider"/> implementation. Its <see cref="M:System.IFormatProvider.GetFormat(System.Type)"/> method must instantiate and return the <see cref="T:System.Globalization.NumberFormatInfo"/> object that provides formatting information.</item>
              </list>
              If provider is <see langword="null"/>, the <see cref="T:System.Globalization.NumberFormatInfo"/> object for the current culture is used.
            </remarks>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Implicit(System.UInt32)~PcapDotNet.Base.UInt48">
            <summary>
            Converts a 32 bit unsigned integer to a 48 bit unsigned integer by taking all the 32 bits.
            </summary>
            <param name="value">The 32 bit value to convert.</param>
            <returns>The 48 bit value created by taking all the 32 bits of the 32bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Explicit(System.Int64)~PcapDotNet.Base.UInt48">
            <summary>
            Converts a 64 bit signed integer to a 48 bit unsigned integer by taking the 48 least significant bits.
            </summary>
            <param name="value">The 64 bit value to convert.</param>
            <returns>The 48 bit value created by taking the 48 least significant bits of the 64 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Explicit(System.UInt64)~PcapDotNet.Base.UInt48">
            <summary>
            Converts a 64 bit unsigned integer to a 48 bit unsigned integer by taking the 48 least significant bits.
            </summary>
            <param name="value">The 64 bit value to convert.</param>
            <returns>The 48 bit value created by taking the 48 least significant bits of the 64 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Implicit(PcapDotNet.Base.UInt48)~System.Int64">
            <summary>
            Converts the 48 bits unsigned integer to a 64 bits signed integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 64 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Implicit(PcapDotNet.Base.UInt48)~System.UInt64">
            <summary>
            Converts the 48 bits unsigned integer to a 64 bits unsigned integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 64 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Explicit(PcapDotNet.Base.UInt48)~System.Byte">
            <summary>
            Converts the 48 bits unsigned integer to an 8 bits unsigned integer.
            </summary>
            <param name="value">The 48 bit value to convert.</param>
            <returns>The 8 bit value converted from the 48 bit value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Equals(PcapDotNet.Base.UInt48)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="other">The value to compare to.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Equality(PcapDotNet.Base.UInt48,PcapDotNet.Base.UInt48)">
            <summary>
            Returns true iff the two values represent the same value.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent the same value.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.op_Inequality(PcapDotNet.Base.UInt48,PcapDotNet.Base.UInt48)">
            <summary>
            Returns true iff the two values represent different values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>True iff the two values represent different values.</returns>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PcapDotNet.Base.UInt48.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:PcapDotNet.Base.FuncExtensions">
            <summary>
            Extension methods for Func of type T.
            </summary>
        </member>
        <member name="M:PcapDotNet.Base.FuncExtensions.GenerateArray``1(System.Func{``0},System.Int32)">
            <summary>
            Generates an array of a given size by generating elements using the given delegate.
            </summary>
            <typeparam name="T">The type of the array to create.</typeparam>
            <param name="generator">The delegate to generate elements with.</param>
            <param name="size">The size of the array to create.</param>
            <returns>An array of a given size with elements generated by the given delegate.</returns>
        </member>
    </members>
</doc>
